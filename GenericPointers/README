/*** Generic Pointer ******/

In the given example the gp pointer points to integer array and a string array

what we observerd here is pointer can point to any datatype without a typecast requriement.
but to dereference we need to do typecast such that compiler knows till how many bytes it has to fetch the data.



int data[LENGTH];                       // some integers
char* words[LENGTH];            // some strings

        void *gp;                       // a generic pointer

        gp = data;                                                                  // set the generic pointer to the start of the integer array
        printf("\ndata array address is %p\n", gp);             // and print it out - note that a cast is not needed
        // now print out the first item in the array
        // - a cast is now needed to let the compiler know what sort of thing is being pointed to by the generic pointer
        printf("item pointed to by gp is %d\n", *(int*)gp);
        // the cast tells the compiler what the address type is and so we can do address arthimetic
        gp = (int*)gp + 1;
        printf("item pointed to by gp is now %d\n", *(int*)gp);


    gp = words;                                                             // set the generic pointer to the start of the string array
        printf("\nwords array address is %p\n", gp);            // and print it out - note that a cast is not needed
        // now print out the first item in the array
        // - a cast is now needed to let the compiler know this is a pointer to a pointer
        printf("item pointed to by gp is %s\n", *(char**)gp);
        // the cast tells the compiler what the address type is and so we can do address arthimetic
        gp = (char**)gp + 1;
        printf("item pointed to by gp is now %s\n", *(char**)gp);
